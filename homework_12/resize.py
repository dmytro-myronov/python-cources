import os
from PIL import Image
from concurrent.futures import ThreadPoolExecutor
from typing import List


def process_image(image_path: str, output_folder: str = "output", size: tuple = (50, 50)) -> None:
    """
    –ó–º—ñ–Ω—é—î —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ –≤ –Ω–æ–≤—É –ø–∞–ø–∫—É.

    Args:
        image_path (str): –®–ª—è—Ö –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
        output_folder (str): –ü–∞–ø–∫–∞, –∫—É–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
        size (tuple): –†–æ–∑–º—ñ—Ä, –¥–æ —è–∫–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—à–∏—Ä–∏–Ω–∞, –≤–∏—Å–æ—Ç–∞).
    """
    try:
        os.makedirs(output_folder, exist_ok=True)
        img = Image.open(image_path)
        img = img.resize(size)
        base_name = os.path.basename(image_path)
        output_path = os.path.join(output_folder, base_name)
        img.save(output_path)
        print(f"[‚úì] –û–±—Ä–æ–±–ª–µ–Ω–æ: {base_name}")
    except Exception as e:
        print(f"[‚úó] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {image_path}: {e}")


def process_images_concurrently(image_paths: List[str]) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î —Å–ø–∏—Å–æ–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ—Ç–æ–∫—ñ–≤.

    Args:
        image_paths (List[str]): –°–ø–∏—Å–æ–∫ —à–ª—è—Ö—ñ–≤ –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å.
    """
    with ThreadPoolExecutor() as executor:
        for path in image_paths:
            executor.submit(process_image, path)


if __name__ == "__main__":
    # üîª –ü—Ä–∏–∫–ª–∞–¥ –≤—Ö—ñ–¥–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—ñ —à–ª—è—Ö–∏)
    images = [
        "file1.jpg",
        "file2.jpg",
        "file3.jpg"
    ]

    process_images_concurrently(images)
    print("‚úÖ –£—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
