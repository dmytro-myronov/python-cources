import logging
import pika
import json
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import os
import load_dotenv

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
load_dotenv() #
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
DJANGO_BACKEND_URL = os.getenv('DJANGO_BACKEND_URL')

# === –í–∏–≤—ñ–¥ –ª–æ–≥—ñ–≤ ===
logging.basicConfig(level=logging.INFO)

# === –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–≤–æ—î —ñ–º'—è —Ç–∞ email —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Ivan, ivan@example.com)")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        name, email = map(str.strip, text.split(","))
        payload = {"username": name, "email": email}

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —É Django
        resp = requests.post(DJANGO_BACKEND_URL, json=payload)
        if resp.status_code == 200:
            await update.message.reply_text("–¢–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!")
        else:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó :(")
    except Exception as e:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —ñ–º'—è —Ç–∞ email —á–µ—Ä–µ–∑ –∫–æ–º—É.")

# === –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ===
def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()

# === –ó–∞–ø—É—Å–∫ —Å–ª—É—Ö–∞—á–∞ RabbitMQ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ Django ===
def callback(ch, method, properties, body):
    data = json.loads(body)
    message = f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {data.get('name')} ({data.get('email')})"
    # –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ chat_id —ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    print("[Bot] ‚úâÔ∏è –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π:", message)

def start_rabbit_listener():
    connection = pika.BlockingConnection(pika.ConnectionParameters("localhost",port=5672))
    channel = connection.channel()
    channel.exchange_declare(exchange='events', exchange_type='topic')
    result = channel.queue_declare('', exclusive=True)
    queue_name = result.method.queue
    channel.queue_bind(exchange='events', queue=queue_name, routing_key="user.registered")
    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)
    print("[Bot] üîä Listening for user.registered events...")
    channel.start_consuming()

# === –ó–∞–ø—É—Å–∫ –æ–±–æ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ (–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –æ–∫—Ä–µ–º–æ–≥–æ –∑–∞–ø—É—Å–∫—É) ===
if __name__ == "__main__":
    from threading import Thread
    Thread(target=start_rabbit_listener, daemon=True).start()
    run_bot()

